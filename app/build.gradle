plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}
apply from: 'jacoco.gradle'

android {
    compileSdk libs.versions.compileSdk.get().toInteger()
    ndkVersion '22.0.7026061'

    defaultConfig {
        applicationId 'org.openobservatory.ooniprobe'
        minSdk libs.versions.minSdk.get().toInteger()
        targetSdk libs.versions.targetSdk.get().toInteger()
        versionName '3.8.4'
        versionCode 106
		testInstrumentationRunner "org.openobservatory.ooniprobe.TestAndroidJUnitRunner"
		buildConfigField 'String', 'OONI_API_BASE_URL', '"https://api.ooni.io/"'
		buildConfigField 'String', 'NOTIFICATION_SERVER', '"https://countly.ooni.io"'
        resValue "string", "APP_ID", 'org.openobservatory.ooniprobe'
		resValue "string", "APP_NAME", "OONI Probe"
		buildConfigField 'String', 'SOFTWARE_NAME', 'BASE_SOFTWARE_NAME+IS_DEBUG'
		buildConfigField 'String', 'COUNTLY_KEY', '"146836f41172f9e3287cab6f2cc347de3f5ddf3b"'
		buildConfigField "boolean", "RUN_AUTOMATION", "false"
	}

    buildTypes {
        debug {
            testCoverageEnabled true
            buildConfigField 'String', 'IS_DEBUG', '"-debug"'
            buildConfigField 'String', 'COUNTLY_KEY', '"e6c2cfe53e85951d50567467cef3f9fa2eab32c3"'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'IS_DEBUG', '""'
        }
    }

    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
        }
    }

    flavorDimensions 'testing', 'license'
    productFlavors {
        stable {
            dimension 'testing'
            buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android"'
        }
        dev {
            dimension 'testing'
            applicationIdSuffix '.dev'
            versionNameSuffix "-beta.1"
            versionCode versionCodeDate()
            buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android-dev"'
            resValue "string", "APP_ID", 'org.openobservatory.ooniprobe.dev'
            resValue "string", "APP_NAME", "OONI Dev"
            buildConfigField 'String', 'COUNTLY_KEY', '"e6c2cfe53e85951d50567467cef3f9fa2eab32c3"'
        }
        experimental {
            dimension 'testing'
            applicationIdSuffix '.experimental'
            versionNameSuffix "-experimental.1"
            versionCode versionCodeDate()
            buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android-experimental"'
            resValue "string", "APP_ID", 'org.openobservatory.ooniprobe.experimental'
            resValue "string", "APP_NAME", "OONI Exp"
            buildConfigField 'String', 'COUNTLY_KEY', '"e6c2cfe53e85951d50567467cef3f9fa2eab32c3"'
        }
        fdroid {
            dimension 'license'
        }
        full {
            dimension 'license'
        }
    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("fdroid") && (names.contains("experimental") || names.contains("dev"))) {
            setIgnore(true)
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
    buildFeatures {
        viewBinding = true
    }
    namespace 'org.openobservatory.ooniprobe'
}

dependencies {
    implementation project(path: ':engine')

// AndroidX
    implementation libs.androidx.appcompat
    //implementation libs.androidx.core
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.lifecycle.process
    implementation libs.androidx.preference
    implementation libs.androidx.localbroadcastmanager
    implementation libs.androidx.legacy.support.v4

// Google
    implementation libs.google.material
    implementation libs.google.guava
    implementation libs.google.gson

// Third-party
    kapt libs.dbflow.processor
    implementation libs.dbflow.core
    implementation libs.dbflow.lib

    implementation libs.retrofit.lib
    implementation libs.retrofit.converter.gson
    implementation libs.retrofit.logging.interceptor


    implementation libs.xanscale.localhost.toolkit
    implementation libs.lottie
    implementation libs.markwon.core
    implementation libs.commons.io
    //arcview to fragment_dashboard
    implementation libs.shapeofview

// Flavor
    fullImplementation platform(libs.google.firebase.bom)
    fullImplementation libs.google.firebase.messaging
    fullImplementation libs.countly.sdk
    fullImplementation libs.sentry.android
    fullImplementation libs.google.play.core

// Dependency Injection
    implementation libs.google.dagger
    kapt libs.google.dagger.compiler

// Logger
    implementation project(':applogger')

// Testing
    // Unit Testing
	testImplementation project(':shared-test')
	testImplementation libs.junit4
    testImplementation libs.androidx.test.core
    testImplementation libs.androidx.runner
    testImplementation libs.androidx.rules
    testImplementation libs.mockito.core
    testImplementation libs.mockito.inline
    testImplementation libs.robolectric
    testImplementation libs.faker
    testImplementation libs.ooni.oonimkall
    kaptTest libs.google.dagger.compiler

    // Instrumentation Testing
	androidTestImplementation project(':shared-test')
	androidTestImplementation libs.fastlane.screengrab
    androidTestImplementation libs.faker
    androidTestImplementation libs.androidx.runner
    androidTestImplementation libs.androidx.rules
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.intents
    androidTestImplementation libs.androidx.espresso.contrib
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation libs.barista
    kaptAndroidTest libs.google.dagger.compiler
}

static def versionCodeDate() {
    return new Date().format("yyyyMMdd").toInteger()
}

if (!getGradle().getStartParameter().getTaskRequests()
  .toString().contains("Fdroid")){
    apply plugin: 'com.google.gms.google-services'
}
